<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eunah.section01.xml.DynamicSqlMapper">
    <resultMap id="menuResultMap" type="com.eunah.common.MenuDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        <if test="condition == 'category'">
            JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'name'">
            AND A.MENU_NAME LIKE CONCAT('%', #{ value }, '%')
        </if>
        <if test="condition == 'category'">
            AND B.CATEGORY_NAME = #{ value }
        </if>
    </select>

    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'

        <!-- 가격이 0 이상 10000 이하인 경우 -->
        <if test="price gte 0 and price lte 10000">
            <!-- CDATA : Character Data(문자 데이터)의 약자  -->
            <!-- CDATA 섹션 : <![CDATA[ ... ]]> 사이에 있는 모든 텍스트를 문자 데이터로 취급한다.
            이 섹션 내에서는 &, <, > 등의 특수 문자를 사용해도 파싱 오류가 발생하지 않는다.
            gt는 greater than(>)의 약자이고, gte는 greater than or equal to(>=)의 약자이다. (반대(little) - lt, lte)
            XML에서 < 와 >를 직접 사용할 수 없기 때문에 이렇게 문자로 대체하여 사용한다. -->
            <![CDATA[
            AND A.MENU_PRICE < #{ price }
            ]]>
        </if>
        <!-- 가격이 10000 초과 20000 이하인 경우 -->
        <if test="price gt 10000 and price lte 20000">
            AND A.MENU_PRICE BETWEEN 10000 AND #{ price }
        </if>
        <!-- 가격이 20000 초과 30000 이하인 경우 -->
        <if test="price gt 20000 and price lte 30000">
            AND A.MENU_PRICE BETWEEN 20000 AND #{ price }
        </if>
        <!-- 가격이 30000 초과 -->
        <if test="price gt 30000">
            AND A.MENU_PRICE BETWEEN 30000 AND #{ price }
        </if>
    </select>

    <!-- choose(when/otherwise) 태그 -->
    <!-- when 태그 test 속성 조건에 부합하면 <when> 엘리먼트 구문을 쿼리에 포함한다.
     어떠한 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함한다. -->
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">
                AND A.CATEGORY_CODE IN (4,5,6,7)
            </when>
            <when test="value == '음료'">
                AND A.CATEGORY_CODE IN (8,9)
            </when>
            <otherwise>
                AND A.CATEGORY_CODE IN (10,11,12)
            </otherwise>
        </choose>

    </select>

    <!-- <foreach> 태그 : JAVA의 for 문 역할을 수행한다.
                         1. collection 속성 : 반복을 수행할 대상
                         2. item 속성 : 반복을 수행할 때 마다 꺼내올 값의 이름 설정
                         3. open 속성 : 구문의 가장 앞에 올 글자
                         4. separator : 반복이 수행될 떄 꺼내온 item 사이에 들어갈 문자
                         5. close 속성 : 구문의 가장 마지막에 올 글자 -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashMap" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        WHERE A.ORDERABLE_STATUS = 'Y'
        AND A.MENU_CODE IN
        <foreach collection="@com.eunah.section01.xml.Application01@createRandomMenuCodeList()" item="menuCode" open="("
                 separator="," close=")">
            #{ menuCode }
        </foreach>
    </select>

    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        <if test="condition != null and condition eq 'menuCode'">
            WHERE A.MENU_CODE = #{ value }
        </if>
    </select>

    <!--
        <where> 태그 : 엘리먼트 구문이 where 로 시작하지 않으면 자동으로 where 을 붙여준다.
                      또한 where 엘리먼트 내부에 모든 쿼리문이 추가되지않는 상황인 경우 where 을 무시한다.
                      단, name 부분이 where 를 뺴주지 않으면 where where 로 2개가 생성될 수 있다.
                      엘리먼트 구문이 AND, OR 로 시작하면 자동으로 해당 단어를 지워준다.
        <trim>  태그 : 조회 조건에 AND 혹은 OR 로 시작하지 않는 다른 문자로 시작하는 경우 등
                      where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 젖ㅇ의하기 위해 trim 엘리먼트를 제공한다.
                      1. prefix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                      2. prefixOverrides : 처리 후 엘리먼트 내용 중 가장 앞에 속성값에 해당하는 문자를 자동 삭제
                      3. suffix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                      4. suffixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값에 해당하는 문자를 자동 삭제 -->
    <select id="searchMenuByNameOrCategory" parameterType="hashMap" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        <!-- <if test="nameValue != null">
             WHERE A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
             </if>
             <if test="categoryValue != null">
             AND A.CATEGORY_CODE = #{ categoryValue }
             </if> -->

        <!-- 위 코드의 문제점을 <where> 태그 이용 해결 -->
       <!-- <where>
            <if test="nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </where>-->

        <!-- 위 코드의 문제점을 <trim> 태그 이용 해결 -->
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>
    </select>


</mapper>

        <!-- Dynamic SQL Mapper 는 MyBatis 와 같은 SQL 매퍼 프레임워크에서 사용되는 개념으로,
        런타임 시점에 동적으로 SQL 쿼리를 생성할 수 있는 기능을 제공한다.
        이 기능은 특히 조건문, 반복문, 변수 대입 등을 사용하여 유연한 쿼리 생성을 가능하게 한다.
        이를 통해 코드의 재사용성과 유지보수성을 높일 수 있다. -->