<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eunah.section01.xmlmapper.ElementTestMapper">
    <!-- 필기. Mapper xml에서 사용할 수 있는 엘리먼트는 총 9가지이다.
          <cache>, <cache-ref>, <resultMap>, <parameterMap>, <sql>, <select>, <insert>, <update>, <delete> -->


    <!-- 필기 1. <cache> 엘리먼트  신입 개발자가 설정할 일 없음 -->
    <cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>
    <!-- 필기.
            <cache>와 <cache-ref>는 캐시를 설정하는 엘리먼트이다.
                - cache는 현재 네임스페이스에 대한 캐시 설정
                - cache-ref는 다른 네임스페이스에 대한 캐시 설정 참조를 할 때 사용
            1. 캐시란 컴퓨터 과학에서 데이터나 값을 미리 복사해놓은 임시 장소를 가리킨다.
            2. 캐시 접근 시간에 비해 원래 데이터에 접근하는 시간이 오래 걸리는 경우나, 값을 다시 계산하는 시간을 절약하고 싶을 때 사용한다.
            3. 캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간 없이 더 빠른 속도로 데이터에 접근할 수 있다.
            =============================================================================================================
            < 캐시의 디폴트 설정 >
                 1. 매퍼 XML의 모든 select 구문의 결과를 캐시에 저장한다.
                 2. 매퍼 XML의 insert, update, delete는 모두 캐시를 지운다.
                 3. 가장 오래 사용하지 않은 캐시를 지우는 알고리즘(LRU-Least Recently Used)을 사용한다.
                 4. 애플리케이션이 실행되는 동안 캐시를 유지한다. 특정 시점에 사라지거나 하지 않는다.
                 5. 캐시는 최대 1024개까지 저장한다.
                 6. 캐시는 읽기/쓰기가 모두 가능하다.
            =============================================================================================================
            < 사용 가능 속성 >
                 1. eviction : 캐시 알고리즘 속성이며 디폴트는 LRU이다. FIFO, SOFT, WEAK로도 설정 가능하다.
                 2. flushInterval : 설정된 캐시를 얼마 동안 유지할지를 밀리초 단위로, 양수로만 설정 가능하다. (여기만 지정한다고 해서 정확히 동작하지 않는다.)
                 3. size : 캐시에 저장할 객체의 수를 지정한다. 디폴트는 1024이다. (더 크게도 가능하지만 메모리가 충분한지 봐야 한다.)
                 4. readonly : 읽기만 가능한 경우 캐시 데이터의 변경이 되지 않는다.
            =============================================================================================================
            < 제약사항 >
                 1. 캐시는 기본적으로 로컬캐시이므로 서버를 여러 대 두는 경우 캐시 내용이 서로 다를 수 있다.
                    따라서 서버마다 캐시 내용을 동일하게 맞추기 위해서는 분산캐시를 사용해야 한다.
                 2. 캐시의 타이머 설정은 가능한 반면 스케쥴링은 불가능하다.
                 => 이러한 제약사항을 해결하기 위해 Cachenix, Ehcache, Hazelcast, OsCache 등을 사용하지만 수업에서 다루지는 않는다.
    -->


    <!-- 필기 2. <resultMap> 엘리먼트 -->
    <select id="selectCacheTest" resultType="java.lang.String">
        SELECT A.MENU_NAME
        FROM TBL_MENU A
    </select>

    <!-- 필기.
            1. DB 에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다.
            2. resultMap 엘리먼트는 MyBatis 에서 가장 중요하고 강력한 엘리먼트이다.
            3. ResultSet 에서 데이터를 가져올 때 작성되는 JDBC 코드를 줄여주는 역할을 한다.
               실제로 join 매핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요한데,
               ResultMap 은 간단한 구문에서는 매핑이 필요하지 않고 복잡한 구문에서 관계를 서술하기 위해 필요하다.
            =============================================================================================================
            < resultMap 엘리먼트 속성 >
                1. id : 매핑 구문에서 결과 매핑을 사용할 때 구분하기 위한 ID 이다.
                2. type : 결과 매핑을 적용하는 대상 객체 타입(= 매핑 구문의 결과 데이터를 저장할 Java 타입을 지정)을 의미한다.
                3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑 정보로 확장할 때 사용한다. (-> 부모 resultMap 아이디 사용)
                4. autoMapping : 결과 매핑을 자동 매핑을 할 것인지를 결정한다. (config 에 설정한 전역 설정을 override 하는데, 이때 디폴트는 unset)
                                 auto 매핑 설정은 동일한 컬럼명이 있는 경우 위험성을 가지기 때문에 사용하지 않는 것이 안전하다. (기본값 : PARTIAL)
                                 NONE, PARTIAL, FULL 세 가지 옵션 설정이 가능하다. -->

    <resultMap id="menuResultMap1" type="com.eunah.common.MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>

    <resultMap id="menuResultMap2" type="com.eunah.common.MenuDTO" extends="menuResultMap1">
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT *
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
    </select>

    <!--        <resultMap>의 하위 엘리먼트
                <id> : primary key 컬럼을 매핑하기 위한 태그이다. (성능 향상)
                <result> : pk가 아닌 일반 컬럼에 매핑하기 위한 태그이다.
                <constructor> : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용한다. <idArg>, <arg> 하위 엘리먼트가 있다.
                <association> : 복잡한 타입의 연관관계로 1:1 포함관계인 경우 사용한다.
                <collection> : 복잡한 타입의 연관관계로 1:다 포함관계인 경우 사용한다.                              -->
    <resultMap id="menuResultMap3" type="com.eunah.common.MenuDTO">
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="String"/>
            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="String"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
        SELECT *
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
    </select>

    <resultMap id="menuAndCategoryResultMap" type="com.eunah.common.MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        <association property="category" javaType="com.eunah.common.CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>

    <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
        SELECT
            A.MENU_CODE,
            A.MENU_NAME,
            A.MENU_PRICE,
            B.CATEGORY_CODE,
            B.CATEGORY_NAME,
            B.REF_CATEGORY_CODE,
            A.ORDERABLE_STATUS
        FROM TBL_MENU A
        JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        WHERE ORDERABLE_STATUS = 'Y'
    </select>

</mapper>
